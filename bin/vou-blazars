#!/bin/bash
#To run the tool,  RA, DEC, SEARCHING RADIUS are mandatory to input., and the other parameters, nH and error regions are optionals.
#The input could be RA, Dec, Radius, nH (if specified), error radius (if specified)

#The error radius could be :
#-one circle or two circle. (error radius)
#-one elliptical or two elliptical (major axis, minor axis, angle)
#-One circle and one elliptical (circle first)
#-nothing

#The R.A. Dec. are in degrees, and searching radius is in arcmin.
#nH is in cm^2
#The radius of the error circles and the axes of the error ellipticals are in arcmin.
#The position angle is in degree, north-east on sky.

#The nh are set to 5.e20 if no specify and no Heasoft installed. (If you have installed the Heasoft, and did not specify the nh, it will use the value calculated by Heasoft)
#The error radius are set to 0. If not specify.

#output EXAMPLES
#e.g.: source vou-blazars 153.76 49.43 30.
#e.g.: source vou-blazars 153.76 49.43 30. 3.e21
#e.g.: source vou-blazars 153.76 49.43 30. 3.e21 15 7 (With 2 error circles, one radius 15, the other radius is 7)
#e.g.: source vou-blazars 153.76 49.43 30. 15 7 (Same as above, just no specify nh)
#e.g.: source vou-blazars 153.76 49.43 30. 15 (Only specify one error circle radius, and the other is set to 0.)
#e.g.: source vou-blazars 153.76 49.43 30. 3.e21 15 10 120 (Specify the nh, and the error elliptical, major axis, minor axis, position angle)
#e.g.: source vou-blazars 153.76 49.43 30. 20 15 10 120(Specify two error regions, one is circle with radius 20, the other is elliptical 15 10 120degree)
#Note that if you specify one circle and one elliptical, circle go first.
#e.g. source vou-blazars 153.76 49.43 30. 3.e21 20 15 10 120(Same as above, but also specify the nh value)
#e.g. source vou-blazars 153.76 49.43 30. 3.e21 15 10 120 5 2 90(Specify two error ellipticals)



# Directory where the fortran binaries are:
#
HERE=$(cd `dirname $BASH_SOURCE`; pwd) ##point to bin file and fortran file
BINF="${HERE}/fort"

handle_ps () {
    [ `which ps2eps 2> /dev/null` ] || return 0
    FILE_PS=$1
    if [ $FILE_PS == sed.ps -o $FILE_PS == LC.ps ]; then
       ps2eps -B -q $FILE_PS -R +
    else
       ps2eps -B -q $FILE_PS
    fi
    if [ `which open 2> /dev/null` ]; then
      open ${FILE_PS%.ps}.eps
    else
      gv ${FILE_PS%.ps}.eps &
    fi
    rm -f $FILE_PS
}





##############################################################
# Initial set up, read the parameters input
##############################################################

#source activate eada2
#check if docker and heasoft are installed
# dockerthere=$(which docker 2> /dev/null)
nhthere=`which nh`

#read the parameters input
echo $# parameters input.
#rm -f 4tex/*eps
#rm -f 4tex/*pdf
#message when output parameters are less than 3 or too many parameters input
until [ $# -ge 3 -a $# -le 11 ]
do
   read -p "Please enter the ra, dec, radius, (nh: only if when heasoft are not installed), (error_major_axis, error_minor_axis, position_angle/error circle radius) " ra dec radius nhval rr1 major1 minor1 angle1 rr2 major2 minor2 angle2
   set $ra $dec $radius $nhval $rr1 $major1 $minor1 $angle1 $rr2 $major2 $minor2 $angle2
   echo $#
done

#read the XRT Deepsky name and create the file to store the results
raxrt=`echo $1 | sed 's/\./_/g'`
decxrt=`echo $2 | sed 's/\./_/g' | sed 's/-/m/g'`
rrxrt=`echo $3 | sed 's/\./_/g'`

# If a variable 'RUN_LABEL' is defined in the environment,
# use it to make the Result/. output directory
#
if [ ! -z "$RUN_LABEL" ]; then
   xrtnm="$RUN_LABEL"
else
   xrtnm=${raxrt}"_"${decxrt}"_"${rrxrt}
fi
if [ -z $pid ]; then
   unset pidnm
   test ! -d Results && mkdir Results
   test ! -d Results/$xrtnm && mkdir Results/$xrtnm
   test ! -d Results/SEDtool && mkdir Results/SEDtool
else
   pidnm=$pid"_"
fi

#adjust the input ra dec from user
nht1=`echo $1 | grep '\.'`
if [ -z $nht1 ]; then
   ranh=$1".0"
else
   nht1=`echo $1 | cut -d'.' -f2`
   if [ -z $nht1 ]; then
      ranh=$1"0"
   else
      ranh=$1
   fi
fi
nht2=`echo $2 | grep '\.'`
if [ -z $nht2 ]; then
   decnh=$2".0"
else
   nht2=`echo $2 | cut -d'.' -f2`
   if [ -z $nht2 ]; then
      decnh=$2"0"
   else
      decnh=$2
   fi
fi

#check if the number 4 parameter are nh value or not
if [ $# -ge 4 ]; then
   ttt=`echo $4 | grep '[eE]'`
   if [ -z $ttt ]; then
      ttnh=wonh
   else
      ttnh=wnh
   fi
else
   ttnh=wonh
fi

#read the nh, or set the default nh value
if [ -z $nhthere ]; then
   nhval=5.E20
   if [ $# -eq 3 -o $ttnh != wnh ]; then
      echo set default nh 5.E20
   fi
else
#   echo $ranh $decnh
   nh equinox=2000 ra=$ranh dec=$decnh > ${pidnm}nhvalue.txt
   nhval=`tail -1 ${pidnm}nhvalue.txt |  awk '{print $7}'`
   rm -f ${pidnm}nhvalue.txt
fi
#check if the SED mode need plotting or not
if [ ${@: -1} == -s ]; then #last parameter
   set ${@: 1 : $#-1} s
   plotsed=N
else
   plotsed=Y
fi

#read the parameters input
if [ $# -eq 3 ]; then
   set $ranh $decnh $3 $nhval 0. 0. 0. 0. 0. 0. 0. 0. f
   echo set default error elliptical axes and angle: 0. 0. 0.
elif [ $# -eq 4 -a $ttnh == wnh ]; then
   set $ranh $decnh $3 $4 0. 0. 0. 0. 0. 0. 0. 0. f
   echo set default error elliptical axes and angle: 0. 0. 0.
elif [ $# -eq 4 -a $ttnh != wnh -a $4 != s ]; then
   set $ranh $decnh $3 $nhval $4 0. 0. 0. 0. 0. 0. 0. f
elif [ $# -eq 4 -a $ttnh != wnh -a $4 == s ]; then
   set $ranh $decnh $3 $nhval 0. 0. 0. 0. 0. 0. 0. 0. $4
   echo set default error elliptical axes and angle: 0. 0. 0.
   echo SED plotting mode
elif [ $# -eq 5 -a $ttnh == wnh -a $5 != s ]; then
   set $ranh $decnh $3 $4 $5 0. 0. 0. 0. 0. 0. 0. f
elif [ $# -eq 5 -a $ttnh == wnh -a $5 == s ]; then
   set $ranh $decnh $3 $4 0. 0. 0. 0. 0. 0. 0. 0. $5
   echo SED plotting mode
elif [ $# -eq 5 -a $ttnh != wnh -a $5 != s ]; then
   set $ranh $decnh $3 $nhval $4 0. 0. 0. $5 0. 0. 0. f
elif [ $# -eq 5 -a $ttnh != wnh -a $5 == s ]; then
   set $ranh $decnh $3 $nhval $4 0. 0. 0. 0. 0. 0. 0. $5
   echo SED plotting mode
elif [ $# -eq 6 -a $ttnh != wnh -a $6 != s ]; then
   set $ranh $decnh $3 $nhval 0. $4 $5 $6 0. 0. 0. 0. f
elif [ $# -eq 6 -a -a $ttnn != wnh -a $6 == s ]; then
   set $ranh $decnh $3 $nhval $4 0. 0. 0. $5 0. 0. 0. $6
   echo SED plotting mode
elif [ $# -eq 6 -a $ttnh == wnh -a $6 != s ]; then
   set $ranh $decnh $3 $4 $5 0. 0. 0. $6 0. 0. 0. f
elif [ $# -eq 6 -a $ttnh == wnh -a $6 == s ]; then
   set $ranh $decnh $3 $4 $5 0. 0. 0. 0. 0. 0. 0. $6
   echo SED plotting mode
elif [ $# -eq 7 -a $ttnh != wnh -a $7 == s ]; then
   set $ranh $decnh $3 $nhval 0. $4 $5 $6 0. 0. 0. 0. $7
   echo SED plotting mode
elif [ $# -eq 7 -a $ttnh != wnh -a $7 != s ]; then
   set $ranh $decnh $3 $nhval $4 0. 0. 0. 0. $5 $6 $7 f
elif [ $# -eq 7 -a $ttnh == wnh -a $7 != s ]; then
   set $ranh $decnh $3 $4 0. $5 $6 $7 0. 0. 0. 0. f
elif [ $# -eq 7 -a $ttnh == wnh -a $7 == s ]; then
   set $ranh $decnh $3 $4 $5 0. 0. 0. $6 0. 0. 0. $7
   echo SED plotting mode
elif [ $# -eq 8 -a $ttnh == wnh -a $8 != s ]; then
   set $ranh $decnh $3 $4 $5 0. 0. 0. 0. $6 $7 $8 f
elif [ $# -eq 8 -a $ttnh != wnh ]; then
   set $ranh $decnh $3 $nhval $4 0. 0. 0. 0. $5 $6 $7 $8
   echo SED plotting mode
elif [ $# -eq 8 -a $ttnh == wnh -a $8 == s ]; then
   set $ranh $decnh $3 $4 0. $5 $6 $7 0. 0. 0. 0. $8
   echo SED plotting mode
elif [ $# -eq 9 -a $ttnh == wnh ]; then
   set $ranh $decnh $3 $4 $5 0. 0. 0. 0. $6 $7 $8 $9
   echo SED plotting mode
elif [ $# -eq 9 -a $ttnh != wnh ]; then
   set $ranh $decnh $3 $nhval 0. $4 $5 $6 0. $7 $8 $9 f
elif [ $# -eq 10 -a $ttnh == wnh ]; then
   set $ranh $decnh $3 $4 0. $5 $6 $7 0. $8 $9 ${10} f
elif [ $# -eq 10 -a $ttnh != wnh ]; then
   set $ranh $decnh $3 $nhval 0. $4 $5 $6 0. $7 $8 $9 ${10}
   echo SED plotting mode
elif [ $# -eq 11 ]; then
   set $ranh $decnh $3 $4 0. $5 $6 $7 0. $8 $9 ${10} ${11}
   echo SED plotting mode
fi

#if the radius of the circle smaller than the elliptical semi-major axis
if [ $5 != 0. -a ${11} != 0. ]; then
   up=`echo $5 | cut -d'.' -f1`
   low=`echo ${11} | cut -d'.' -f1`
   if [ $up -lt $low ]; then
      set $1 $2 $3 $4 $9 ${10} ${11} ${12} $5 $6 $7 $8 ${13}
   elif [ $up -eq $low ]; then
      up=`echo $5 | cut -d'.' -f2`
      low=`echo ${11} | cut -d'.' -f2`
      if [ $up -lt $low ]; then
         set $1 $2 $3 $4 $9 ${10} ${11} ${12} $5 $6 $7 $8 ${13}
      fi
   fi
fi
echo $1 $2 $3 $4 $5 $6 $7 $8 $9 ${10} ${11} ${12}

#analyzing the XRT Deepsky data
#if [ -n $dockerthere ]; then
#docker run --name caldb chbrandt/heasoft_caldb:swift
#alias swift_deepsky='docker run --rm -it --volumes-from caldb -v $PWD/work:/work chbrandt/swift_deepsky:latest'
#swift_deepsky --ra $1 --dec $2 --radius $3
#echo finish searching swift deep data
#fi





##############################################################
# FIRST PHASE
# aim: find the candidates from available radio and X-ray sources
##############################################################

#FIRST phase data retrieving, runing the conesearch 1st phase
rm -f ${pidnm}*.1.csv
echo conesearch --db ${HERE}/cats1.ini --catalog NVSS --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}nvss.1.csv > ${pidnm}vosearch.txt
echo conesearch --db ${HERE}/cats1.ini --catalog FIRST --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}first.1.csv >> ${pidnm}vosearch.txt
echo conesearch --db ${HERE}/cats1.ini --catalog SUMSS --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}sumss.1.csv >> ${pidnm}vosearch.txt
#echo conesearch --db ${HERE}/cats1.ini --catalog SXPS --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}sxps.1.csv >> ${pidnm}vosearch.txt
echo conesearch --db ${HERE}/cats1.ini --catalog SDS82 --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}sds82.1.csv >> ${pidnm}vosearch.txt
echo conesearch --db ${HERE}/cats1.ini --catalog OUSXB --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}ousxb.1.csv >> ${pidnm}vosearch.txt
echo conesearch --db ${HERE}/cats1.ini --catalog OUSXG --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}ousxg.1.csv >> ${pidnm}vosearch.txt
echo conesearch --db ${HERE}/cats1.ini --catalog RASS --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}rass.1.csv >> ${pidnm}vosearch.txt
echo conesearch --db ${HERE}/cats1.ini --catalog XMMSL --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}xmmsl.1.csv >> ${pidnm}vosearch.txt
echo conesearch --db ${HERE}/cats1.ini --catalog 3XMM --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}3xmm.1.csv >> ${pidnm}vosearch.txt
echo conesearch --db ${HERE}/cats1.ini --catalog BMW --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}bmw.1.csv >> ${pidnm}vosearch.txt
echo conesearch --db ${HERE}/cats1.ini --catalog WGACAT --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}wgacat.1.csv >> ${pidnm}vosearch.txt
echo conesearch --db ${HERE}/cats1.ini --catalog IPC2E --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}ipc.1.csv >> ${pidnm}vosearch.txt
echo conesearch --db ${HERE}/cats1.ini --catalog IPCSL --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}ipcsl.1.csv >> ${pidnm}vosearch.txt
echo conesearch --db ${HERE}/cats1.ini --catalog CHANDRA --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}chandra.1.csv >> ${pidnm}vosearch.txt
#echo conesearch --db ${HERE}/cats1.ini --catalog MAXISSC --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}maxissc.1.csv >> ${pidnm}vosearch.txt
#echo conesearch --db ${HERE}/cats1.ini --catalog MAXIGSC --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}maxigsc.1.csv >> ${pidnm}vosearch.txt
if [ ${13} != s ]; then #skip the catalogs that we don't plot its data on SED
   echo conesearch --db ${HERE}/cats1.ini --catalog ZWCLUSTERS --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}zw.1.csv >> ${pidnm}vosearch.txt
   echo conesearch --db ${HERE}/cats1.ini --catalog PSZ2 --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}psz2.1.csv >> ${pidnm}vosearch.txt
   echo conesearch --db ${HERE}/cats1.ini --catalog ABELL --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}abell.1.csv >> ${pidnm}vosearch.txt
   echo conesearch --db ${HERE}/cats1.ini --catalog MCXC --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}mcxc.1.csv >> ${pidnm}vosearch.txt
   echo conesearch --db ${HERE}/cats1.ini --catalog 5BZCat --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}5bzcat.1.csv >> ${pidnm}vosearch.txt
   echo conesearch --db ${HERE}/cats1.ini --catalog SDSSWHL --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}whl.1.csv >> ${pidnm}vosearch.txt
   echo conesearch --db ${HERE}/cats1.ini --catalog SWXCS --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}swxcs.1.csv >> ${pidnm}vosearch.txt
   echo conesearch --db ${HERE}/cats1.ini --catalog 3HSP --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}3hsp.1.csv >> ${pidnm}vosearch.txt
   echo conesearch --db ${HERE}/cats2.ini --catalog CRATES --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}crates.1.csv >> ${pidnm}vosearch.txt
   echo conesearch --db ${HERE}/cats1.ini --catalog PULSAR --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}pulsar.1.csv >> ${pidnm}vosearch.txt
   echo conesearch --db ${HERE}/cats1.ini --catalog F2PSR --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}f2psr.1.csv >> ${pidnm}vosearch.txt
   echo conesearch --db ${HERE}/cats2.ini --catalog 4FGL --ra $1 --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}4fgl.1.csv >> ${pidnm}vosearch.txt
   echo conesearch --db ${HERE}/cats2.ini --catalog 3FHL --ra $1  --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}3fhl.1.csv >> ${pidnm}vosearch.txt
   echo conesearch --db ${HERE}/cats2.ini --catalog 3FGL --ra $1  --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}3fgl.1.csv >> ${pidnm}vosearch.txt
   echo conesearch --db ${HERE}/cats2.ini --catalog 1BIGB --ra $1  --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}1bigb.1.csv >> ${pidnm}vosearch.txt
   echo conesearch --db ${HERE}/cats2.ini --catalog MST9Y --ra $1  --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}mst9y.1.csv >> ${pidnm}vosearch.txt
   echo conesearch --db ${HERE}/cats2.ini --catalog FermiMeV --ra $1  --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}fmev.1.csv >> ${pidnm}vosearch.txt
   echo conesearch --db ${HERE}/cats2.ini --catalog AGILE --ra $1  --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}agile.1.csv >> ${pidnm}vosearch.txt
   echo conesearch --db ${HERE}/cats1.ini --catalog FermiGRB --ra $1  --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}fgrb.1.csv >> ${pidnm}vosearch.txt
   echo conesearch --db ${HERE}/cats1.ini --catalog MilliQuas --ra $1  --dec $2 --radius $3 --runit arcmin --columns default -o ${pidnm}mquas.1.csv >> ${pidnm}vosearch.txt
fi

#check if the phase 1 data is already there
ncat1=`cat ${pidnm}vosearch.txt | wc -l`
rm -f voerror.txt
sh ${HERE}/queue.sh -f ${pidnm}vosearch.txt -n $ncat1 #2> voerror #!2>&1
#   cat voerror | grep 'ERROR'
#see if there is an error when searching through VO
declare -i irunvo=1
if [ -s voerror.txt ]; then
   voerror=yes
else
   voerror=no
fi
#echo $voerror
until [ $voerror == no -o $irunvo -ge 3 ]
do
   runvo=y
#   [ -z $pid ] && read -p "Found error when searhcing through VO. Type 'n' to skip and continue; otherwise, rerun the VO conesearch" runvo
   [ -z $runvo ] && runvo=y
   cat voerror.txt > vosearch.txt
   rm -f voerror.txt
   irunvo=${irunvo}+1
   echo
   echo VO search returned errors for one or more catalogues. Run conesearch again $irunvo
   [ $runvo != n -a $runvo != N ] && sh ${HERE}/queue.sh -f ${pidnm}vosearch.txt -n $ncat1
   if [ -s voerror.txt ]; then
      voerror=yes
   else
      voerror=no
   fi
done
echo
echo finish conesearch phase 1
rm -f ${pidnm}vosearch.txt

#read the data
ls ${pidnm}*.1.csv > ${pidnm}catlist1.txt
#copy the XRTDEEP result and add to the catlist1
rm -f ${pidnm}xrtdeep.csv
if [ -s work/$xrtnm/table_flux_detections.csv ]; then
   cat work/$xrtnm/table_flux_detections.csv | sed 's/;/,/g' | sed 's/:/ /g' > ${pidnm}xrtdeep.csv
fi
[ -s ${pidnm}xrtdeep.csv ] && echo ${pidnm}xrtdeep.csv >> ${pidnm}catlist1.txt
rm -f ${pidnm}output1.csv
echo
[ -s ${pidnm}catlist1.txt ] && ${BINF}/readcat ${pidnm}catlist1.txt ${pidnm}output1.csv $1 $2 $3 $4 $5 $6 $7 $8

#running the PHASAE 1
rm -f ${pidnm}*temp.txt
if [ ${13} == s ]; then
   ${BINF}/find_candidates1 ${pidnm}output1 ${pidnm}find_out_temp.txt ${pidnm}RX_temp.txt ${pidnm}Sed_temp.txt ${pidnm}no_matched_temp.txt ${BINF} 0 > ${pidnm}phase1
   echo
   cat ${pidnm}phase1
else
   ${BINF}/find_candidates1 ${pidnm}output1 ${pidnm}find_out_temp.txt ${pidnm}RX_temp.txt ${pidnm}Sed_temp.txt ${pidnm}no_matched_temp.txt ${BINF} 1 > ${pidnm}phase1
   echo
   cat ${pidnm}phase1

###############################PLOTTING###############################
#plot the result, candidates map and radio-X-ray source map
   rm -f ${pidnm}candidates.*ps
   rm -f ${pidnm}RX_map.*ps
   sort -n -k 3 ${pidnm}RX_temp.txt > ${pidnm}RX_sorted.txt
   rm -f ${pidnm}RX_temp.txt
   ${BINF}/gnomo_plot_types ${pidnm}RX_sorted.txt,${pidnm}candidates_posix.txt,${pidnm}RX_map.ps/vcps, $1 $2 $5 $3 ${1} ${2} $6 $7 $8 $9 ${10} ${11} ${12} ${1} ${2}
   ${BINF}/gnomo_plot_types ${pidnm}find_out_temp.txt,${pidnm}candidates_posix.txt,${pidnm}candidates.ps/vcps, $1 $2 $5 $3 ${1} ${2} $6 $7 $8 $9 ${10} ${11} ${12} ${1} ${2}
   handle_ps ${pidnm}RX_map.ps
   handle_ps ${pidnm}candidates.ps
#   ps2eps -B -q RX_map.ps
#   open RX_map.eps
#   ps2eps -B -q candidates.ps
#  open candidates.eps
#   rm -f candidates.ps
#   rm -f RX_map.ps
##############################################################
fi





##############################################################
# Intermediate PHASE
# aim: find more available candiates from single radio/ single X-ray sources.
##############################################################

rm -f ${pidnm}Intermediate_out.txt
if [ -s ${pidnm}no_matched_temp.txt ]; then
#check the error circle
   if [ $5 != 0. -a $6 == 0. ]; then
      radint=$5
   elif [ $5 == 0. -a $6 != 0. ]; then
      radint=$6
   else
      radint=1.
      echo
      echo set default error circle area to 1 arcmin in Intermediate phase
   fi
   radcrit=`echo $radint | cut -d'.' -f 1`
   [ -z $radcrit ] && radcrit=1
   [ $radcrit -lt 1 ] && radcrit=1
#   echo 'radcrit' $radcrit
   if [ -z $pid ]; then
      process=y
   else
      process=n
   fi

#   rcut=0
#   declare -i radint
   if [ $radcrit -ge 20 ]; then
      echo
      echo Warning! Large searching radius in Intermediate phase for conesearch.
      [ -z $pid ] && read -p "Type 'y' to continue! Otherwise, stop processing Intermediate phase." process #rcut
      [ -z $process ] && process=n
      [ $process != y -a $process != Y ] && echo Not searching sources in Intermediate phase.
   fi

#running conesearch for Intermediate phase
   if [ $process == y -o $process == Y ]; then
      rm -f *.i.csv
      ln=`cat ${pidnm}no_matched_temp.txt | wc -l`
      declare -i cc
      cc=0
      for (( jj=1; jj<=$ln; jj=jj+1 ))
      do
         raint=`head -$jj ${pidnm}no_matched_temp.txt | tail -1 |  awk '{print $5}'`
         decint=`head -$jj ${pidnm}no_matched_temp.txt | tail -1 |  awk '{print $6}'`
         typeint=`head -$jj ${pidnm}no_matched_temp.txt | tail -1 |  awk '{print $10}'`
         #declare -i typeint
         if [ $typeint -gt 50 -o $typeint -lt 0 ]; then
            cc=$cc+1
         fi
      done
      echo conesearch --db ${HERE}/cats2.ini --catalog GALEX --ra $1 --dec $2 --radius $radint --runit arcmin --columns default -o ${pidnm}galex.i.csv > ${pidnm}vosearch.txt
#      echo conesearch --db ${HERE}/cats2.ini --catalog Fermi8YL --ra $1 --dec $2 --radius $radint --runit arcmin --columns default -o fermi8yr.i.csv >> vosearch.txt
      echo conesearch --db ${HERE}/cats2.ini --catalog PMN --ra $1 --dec $2 --radius $radint --runit arcmin --columns default -o ${pidnm}pmn.i.csv >> ${pidnm}vosearch.txt
      echo conesearch --db ${HERE}/cats2.ini --catalog GB6 --ra $1 --dec $2 --radius $radint --runit arcmin --columns default -o ${pidnm}gb6.i.csv >> ${pidnm}vosearch.txt
      echo Searching further data in intermediate phase for $cc source
      ncatint=`cat ${pidnm}vosearch.txt | wc -l`
      rm -f voerror.txt
      sh ${HERE}/queue.sh -f ${pidnm}vosearch.txt -n $ncatint #1> voerror 2>&1
#      cat voerror | grep 'ERROR'

# check if there is error during the searching
      declare -i irunvo=1
      if [ -s voerror.txt ]; then
         voerror=yes
      else
         voerror=no
      fi
#      echo $voerror
      until [ $voerror == no -o $irunvo -ge 3 ]
      do
         runvo=y
      #   [ -z $pid ] && read -p "Found error when searhcing through VO. Type 'n' to skip and continue; otherwise, rerun the VO conesearch" runvo
         [ -z $runvo ] && runvo=y
         cat voerror.txt > vosearch.txt
         rm -f voerror.txt
         irunvo=${irunvo}+1
         echo
         echo VO search returned errors for one or more catalogues. Run conesearch again $irunvo
         [ $runvo != n -a $runvo != N ] && sh ${HERE}/queue.sh -f ${pidnm}vosearch.txt -n $ncat1
         if [ -s voerror.txt ]; then
            voerror=yes
         else
            voerror=no
         fi
      done
      echo
      echo finish conesearch intermediate phase
      rm -f ${pidnm}vosearch.txt

#read the Intermediate phase data
      ls ${pidnm}*.i.csv > ${pidnm}catlist_int.txt
      rm -f ${pidnm}output_int.csv
      echo
      [ -s ${pidnm}catlist_int.txt ] && ${BINF}/readcat ${pidnm}catlist_int.txt ${pidnm}output_int.csv $1 $2 $3 $4 $5 $6 $7 $8

#run the Intermediate phase
      echo
      ${BINF}/find_candidates_int ${pidnm}output_int ${pidnm}no_matched_temp.txt ${pidnm}find_out_temp.txt ${pidnm}Intermediate_out.txt
   fi
fi

#transfer the data from Intermediate phase to 2 phase
if [ -s ${pidnm}Intermediate_out.txt ]; then
   nint=`tail -1 ${pidnm}Intermediate_out.txt | awk '{print $1}' `
#   declare -i nint
   head -$nint ${pidnm}Intermediate_out.txt >> ${pidnm}find_out_temp.txt
   nnllint=`cat ${pidnm}Intermediate_out.txt | wc -l`
   declare -i nsedl=$nnllint-$nint
   declare -i nsedu=$nnllint-$nint-1
   tail -$nsedl ${pidnm}Intermediate_out.txt | head -$nsedu >> ${pidnm}Sed_temp.txt

###############################PLOTTING###############################
#plot the candidates again with Intermediate phase finish ???
   rm -f ${pidnm}candidates.*ps
   ${BINF}/gnomo_plot_types ${pidnm}find_out_temp.txt,${pidnm}candidates_posix.txt,${pidnm}candidates.ps/vcps, $1 $2 $5 $3 $1 $2 $6 $7 $8 $9 ${10} ${11} ${12} $1 $2
   handle_ps ${pidnm}candidates.ps
#    ps2eps -B -q candidates.ps
#    open candidates.eps
#    rm -f candidates.ps
######################################################################
fi

#save the phase 1 and phase intermediate results in the folder
[ ${13} != s -a -d Results/$xrtnm ] && cp candidates.*ps Results/$xrtnm/.
[ ${13} != s -a -d Results/$xrtnm ] && cp RX_map.*ps Results/$xrtnm/.
[ -f output1.csv -a -d Results/$xrtnm ] && cp output1.csv Results/$xrtnm/output1.csv
[ -f output_int.csv -a -d Results/$xrtnm ] && cp output_int.csv Results/$xrtnm/output_int.csv





#######################################################
# Second PHASE
# aim: Plot the SED and error circle map for a specified source
#######################################################

#begin phase 2 setup, leave the tool when no candidates
rm -f ${pidnm}*.2.csv
source=1

if [ ! -s ${pidnm}find_out_temp.txt ]; then
   source=nocand
   ln=0
fi

#read the number interested
until [ $source == sed -o $source == q ]
do
   if [ ${13} != s -a $source != nocand ]; then
      echo
      if [ -z $VOUB_AUTOSED ]; then
#        cat ${pidnm}phase1
        if [ -z $pid ]; then
           read -p "Please enter the source number and zoom in area (in arcsec) intered: (Type 'q' to quit) (Type 'candlist' to show all candidates)" source zoomin showsed
        else
           source=q
        fi
      else
        runiter=`ls ${pidnm}*.$source.2.csv 2>/dev/null | wc -l`
        if [ $VOUB_AUTOSED == all -a ${runiter} -eq 0 ]; then
           [ -f ${pidnm}Sed_temp.txt ] && `grep "matched source" ${pidnm}Sed_temp.txt | awk '{print $1}' | uniq > ${pidnm}sources.list`
#           cat sources.list
        elif [ $VOUB_AUTOSED == part -a ${runiter} -eq 0 ]; then
           cat phase1 | tail -2 | head -1 |awk '{print $7 "\n" $8 "\n" $9 "\n" $10 "\n" $11}' > sources.list
        fi
        #cat sources.list
        #[ `wc -l ${pidnm}sources.list | cut -d' ' -f1` == 0 ] && { source='q'; continue; }
        declare -i sourcenb
        sourcenb=`cat ${pidnm}sources.list | wc -l`
        sourcenb=${sourcenb}-1
        if [ $sourcenb -ge 0 ]; then
           source=`head -1 ${pidnm}sources.list`
        #echo $sourcenb
           cat ${pidnm}sources.list | tail -${sourcenb} > ${pidnm}sources.tmp
           mv ${pidnm}sources.tmp ${pidnm}sources.list
        else
           source=q
        fi
      #elif [ $VOUB_AUTOSED=part ]; then
      fi
      ln=`cat ${pidnm}find_out_temp.txt | wc -l`
   elif [ ${13} == s ]; then
      ln=1
      source=sed
#      [ ! -f ${pidnm}find_out_temp.txt ] && echo $1 $2 99 > ${pidnm}find_out_temp.txt
      declare -i zoomintt #deal with non interger input
      declare -i zoomindd
      declare -i zoomin
      nht3=`echo $3 | grep '\.'`
      if [ $nht3 ]; then
         nht31=`echo $3 | cut -d'.' -f1`
         nht32=`echo $3 | cut -d'.' -f2`
         if [ -z $nht32 ]; then
            zoomintt=$nht31
            zoomindd=0
         else
            zoomintt=${nht31}
            zoomindd=${nht32:0:1}
            zoomindd=${zoomindd}*6
            if [ ${nht32:1:2} ]; then
               if [ ${nht32:1:2} -lt 3 ]; then
                  zoomindd=${zoomindd}+1
               elif [ ${nht32:1:2} -lt 5 ]; then
                  zoomindd=${zoomindd}+2
               elif [ ${nht32:1:2} -eq 5 ]; then
                  zoomindd=${zoomindd}+3
               elif [ ${nht32:1:2} -lt 8 ]; then
                  zoomindd=${zoomindd}+4
               else
                  zoomindd=${zoomindd}+5
               fi
            fi
         fi
      else
         zoomintt=$3
         zoomindd=0
      fi
      zoomin=${zoomintt}*60+${zoomindd}
   fi

#check if need to output the SED file or not and deal with no input
   [ -z $source ] && source=0 #no input
   [ -z $showsed ] && showsed=nosed
   if [ $zoomin ]; then
      if [ $zoomin == osed ]; then
         zoomin=30.
         showsed=osed
      fi
   fi

#read the find_out list and the second phase ra dec
   declare -i nn
   nn=0
   [ -z $ln ] && ln=0
   for (( ii=1; ii<=$ln; ii=ii+1 ))
   do
      if [ ${13} != s ]; then
         rar=`head -$ii ${pidnm}find_out_temp.txt | tail -1 |  awk '{print $1}'`
         decr=`head -$ii ${pidnm}find_out_temp.txt | tail -1 |  awk '{print $2}'`
         typer=`head -$ii ${pidnm}find_out_temp.txt | tail -1 |  awk '{print $3}'`
      else
         rar=$1
         decr=$2
         typer=99
#         echo the mode $source
      fi

#check if the source is BZ/WHSP already has matched, and echo the conessearch
# 99 for sed moed, -9999 for pulsar. -1111 for Gamma, -2222 for GRB, no number
      if  [ $typer -gt 10000 -o $typer -lt -40000 -o $typer -eq 99 -o $typer -eq -9999 ]; then
         nn=$nn+1
         if [ $nn = $source -o $source == sed ]; then
            echo conesearch --db ${HERE}/cats2.ini --catalog WISH352 --ra $rar --dec $decr --radius 15 --runit arcsec --columns default -o ${pidnm}wish352.$nn.2.csv > ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog PMN --ra $rar --dec $decr --radius 30 --runit arcsec --columns default -o ${pidnm}pmn.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog GB6 --ra $rar --dec $decr --radius 30 --runit arcsec --columns default -o ${pidnm}gb6.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog GB87 --ra $rar --dec $decr --radius 30 --runit arcsec --columns default -o ${pidnm}gb87.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog AT20G --ra $rar --dec $decr --radius 15 --runit arcsec --columns default -o ${pidnm}at20.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog ATPMN --ra $rar --dec $decr --radius 15 --runit arcsec --columns default -o ${pidnm}atpmn.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog CRATES --ra $rar --dec $decr --radius 15 --runit arcsec --columns default -o ${pidnm}crates.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog NORTH20 --ra $rar --dec $decr --radius 2 --runit arcmin --columns default -o ${pidnm}north20.$nn.2.csv >> ${pidnm}vosearch.txt
#            echo conesearch --db ${HERE}/cats2.ini --catalog PCCS44 --ra $rar --dec $decr --radius 3 --runit arcmin --columns default -o ${pidnm}pccs44.$nn.2.csv >> ${pidnm}vosearch.txt
#            echo conesearch --db ${HERE}/cats2.ini --catalog PCCS70 --ra $rar --dec $decr --radius 3 --runit arcmin --columns default -o ${pidnm}pccs70.$nn.2.csv >> ${pidnm}vosearch.txt
#            echo conesearch --db ${HERE}/cats2.ini --catalog PCCS100 --ra $rar --dec $decr --radius 3 --runit arcmin --columns default -o ${pidnm}pccs100.$nn.2.csv >> ${pidnm}vosearch.txt
#            echo conesearch --db ${HERE}/cats2.ini --catalog PCCS143 --ra $rar --dec $decr --radius 3 --runit arcmin --columns default -o ${pidnm}pccs143.$nn.2.csv >> ${pidnm}vosearch.txt
#            echo conesearch --db ${HERE}/cats2.ini --catalog PCCS217 --ra $rar --dec $decr --radius 3 --runit arcmin --columns default -o ${pidnm}pccs217.$nn.2.csv >> ${pidnm}vosearch.txt
#            echo conesearch --db ${HERE}/cats2.ini --catalog PCCS353 --ra $rar --dec $decr --radius 3 --runit arcmin --columns default -o ${pidnm}pccs353.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog PCNT --ra $rar --dec $decr --radius 3 --runit arcmin --columns default -o ${pidnm}pcnt.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog ALMA --ra $rar --dec $decr --radius 15 --runit arcsec --columns default -o ${pidnm}alma.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog WISE --ra $rar --dec $decr --radius 10 --runit arcsec --columns default -o ${pidnm}wise.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog 2MASS --ra $rar --dec $decr --radius 10 --runit arcsec --columns default -o ${pidnm}2mass.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog SPIRE250 --ra $rar --dec $decr --radius 15 --runit arcsec --columns default -o ${pidnm}spire250.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog SPIRE350 --ra $rar --dec $decr --radius 15 --runit arcsec --columns default -o ${pidnm}spire350.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog SPIRE500 --ra $rar --dec $decr --radius 15 --runit arcsec --columns default -o ${pidnm}spire500.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog SDSS --ra $rar --dec $decr --radius 10 --runit arcsec --columns default -o ${pidnm}sdss.$nn.2.csv >> ${pidnm}vosearch.txt
            #echo conesearch --db ${HERE}/cats2.ini --catalog USNO --ra $rar --dec $decr --radius 10 --runit arcsec --columns default -o ${pidnm}usno.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog HSTGSC --ra $rar --dec $decr --radius 10 --runit arcsec --columns default -o ${pidnm}hst.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog PanSTARRS --ra $rar --dec $decr --radius 10 --runit arcsec --columns default -o ${pidnm}panstarrs.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog GAIA --ra $rar --dec $decr --radius 10 --runit arcsec --columns default -o ${pidnm}gaia.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog GALEX --ra $rar --dec $decr --radius 15 --runit arcsec --columns default -o ${pidnm}galex.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog XMMOM --ra $rar --dec $decr --radius 15 --runit arcsec --columns default -o ${pidnm}xmmom.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog UVOT --ra $rar  --dec $decr --radius 15 --runit arcsec --columns default -o ${pidnm}uvot.$nn.2.csv >> ${pidnm}vosearch.txt
#            echo conesearch --db ${HERE}/cats2.ini --catalog CMA --ra $rar  --dec $decr --radius 30 --runit arcsec --columns default -o ${pidnm}cma.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog XRTSPEC --ra $rar --dec $decr --radius 15 --runit arcsec --columns default -o ${pidnm}xrtspec.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog OUSPEC --ra $rar --dec $decr --radius 15 --runit arcsec --columns default -o ${pidnm}ouspec.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog BAT105 --ra $rar --dec $decr --radius 10 --runit arcmin --columns default -o ${pidnm}bat105.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog 3FGL --ra $rar  --dec $decr --radius 20 --runit arcmin --columns default -o ${pidnm}3fgl.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog 2FHL --ra $rar  --dec $decr --radius 20 --runit arcmin --columns default -o ${pidnm}2fhl.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog 4FGL --ra $rar --dec $decr --radius 20 --runit arcmin --columns default -o ${pidnm}4fgl.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog 3FHL --ra $rar  --dec $decr --radius 20 --runit arcmin --columns default -o ${pidnm}3fhl.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog 1BIGB --ra $rar  --dec $decr --radius 10 --runit arcmin --columns default -o ${pidnm}1bigb.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog AGILE --ra $rar  --dec $decr --radius 50 --runit arcmin --columns default -o ${pidnm}agile.$nn.2.csv >> ${pidnm}vosearch.txt
            echo conesearch --db ${HERE}/cats2.ini --catalog FermiMeV --ra $rar  --dec $decr --radius 30 --runit arcmin --columns default -o ${pidnm}fmev.$nn.2.csv >> ${pidnm}vosearch.txt
            echo specsearch --db ${HERE}/cats2.ini --service MAGIC --ra $rar  --dec $decr --radius 10 --runit arcmin --columns default -o ${pidnm}magictt.$nn.2.csv >> ${pidnm}vosearch.txt
            echo specsearch --db ${HERE}/cats2.ini --service VERITAS --ra $rar  --dec $decr --radius 10 --runit arcmin --columns default -o ${pidnm}veritas.$nn.2.csv >> ${pidnm}vosearch.txt
            echo $rar $decr $typer $nn
            racand=$rar
            deccand=$decr
         fi
      fi
   done

#check if the number input are not valid, or the user want to quit
   if [ ! -f ${pidnm}vosearch.txt -a ${source} != q -a ${source} != candlist -a ${source} != nocand  -a ${source} != sed -a ${source} != a ]; then
      source=nosource
   fi
   if [ $source == nosource ]; then
      echo NO SOURCE NUMBER FIND!
   elif [ $source == candlist ]; then
      echo
      cat phase1
   elif [ $source == nocand ]; then
      echo No Candidates Found!!!
      source=q
   elif [ $source == q ]; then
      echo
   elif [ $source == a ]; then
      rm -rf ${pidnm}vou-aladin.html
      ${BINF}/aladin_interface ${pidnm}output1.csv ${pidnm}find_out_temp.txt ${pidnm}candidates_posix.txt ${HERE}/aladin_script.js ${pidnm}vou-aladin.html
#    mv vou-aladin.html ~/.
      open ${pidnm}vou-aladin.html
#check if the phase 2 data are already there, if no, retrieving PHASE 2 data
   else
      ncat2=`cat ${pidnm}vosearch.txt | wc -l`
      catthere=`ls ${pidnm}*.$source.2.csv 2>/dev/null | wc -l`
      if [ $catthere != 0 ]; then
         echo
         echo data already downloaded!
         rm -f ${pidnm}vosearch.txt
      else
         rm -f ${pidnm}voerror.txt
         sh ${HERE}/queue.sh -f ${pidnm}vosearch.txt -n $ncat2 #1> voerror 2>&1
#         cat voerror | grep 'ERROR'
         declare -i irunvo=1
         if [ -s ${pidnm}voerror.txt ]; then
            voerror=yes
         else
            voerror=no
         fi
#      echo $voerror
         until [ $voerror == no -o $irunvo -ge 3 ]
         do
            runvo=y
#   [ -z $pid ] && read -p "Found error when searhcing through VO. Type 'n' to skip and continue; otherwise, rerun the VO conesearch" runvo
            [ -z $runvo ] && runvo=y
            cat ${pidnm}voerror.txt > ${pidnm}vosearch.txt
            rm -f ${pidnm}voerror.txt
            irunvo=${irunvo}+1
            echo
            echo VO search returned errors for one or more catalogues. Run conesearch again $irunvo
            [ $runvo != n -a $runvo != N ] && sh ${HERE}/queue.sh -f ${pidnm}vosearch.txt -n $ncat1
            if [ -s ${pidnm}voerror.txt ]; then
               voerror=yes
            else
               voerror=no
            fi
         done
         rm -f ${pidnm}vosearch.txt
         echo
      fi
      echo finish conesearch phase 2
      echo ra , dec = $racand , $deccand

#the nh value in phase 2
      if [ -z $nhthere ]; then
         nhval=$4
      else
         nh equinox=2000 ra=$racand dec=$deccand > ${pidnm}nhvalue.txt
         nhval=`tail -1 ${pidnm}nhvalue.txt |  awk '{print $7}'`
         rm -f ${pidnm}nhvalue.txt
      fi

#read the phase 2 data
      if [ -f ${pidnm}magictt.*.2.csv ]; then
         if [ $source == sed ]; then
            magic=1
         else
            magic=$source
         fi
         cat ${pidnm}magictt.$magic.2.csv | grep -v '#' > ${pidnm}magic.$magic.2.csv #deal with MAGIC extension
         rm -f ${pidnm}magictt.$magic.2.csv
      fi
      ls ${pidnm}*.2.csv > ${pidnm}catlist2.txt
      rm -f ${pidnm}output2.csv
      echo
      [ -s ${pidnm}catlist2.txt ] && ${BINF}/readcat ${pidnm}catlist2.txt ${pidnm}output2.csv $racand $deccand $3 $nhval 0. 0. 0. 0.
      if [ ! -s ${pidnm}output2.csv ]; then
         echo RA= $rar Dec= $decr radius= $3 > output2.csv
         echo nH= 0.0 Error circle/elliptical= 0.  0.  0.  0.  0. >> output2.csv
      fi

#running the PHASAE 2
      rm -f ${pidnm}sed.txt
      rm -f ${pidnm}error_map.txt
      ${BINF}/find_candidates2 ${pidnm}output2 ${pidnm}find_out_temp.txt ${pidnm}Sed_temp.txt ${pidnm}error_map.txt ${pidnm}Sed.txt ${HERE}/catrefs.txt ${BINF} $source > ${pidnm}phase2
      echo
      cat ${pidnm}phase2
      #open sed.txt

###############################PLOTTING###############################
#plot the PHASE 2 error map and set default area 1 arcmin
      if [ -z $zoomin ]; then
         zoomin=60.
         echo set default second phase zoomin area to 1.0 arcmin.
      fi
      rm -f ${pidnm}LC.txt
      rm -f ${pidnm}error_map.*ps
      rm -f ${pidnm}sed.*ps
      rm -f ${pidnm}LC.*ps
      if [ $plotsed != N ]; then
         ${BINF}/gnomo_plot_types ${pidnm}error_map.txt,${pidnm}candidates_posix.txt,${pidnm}error_map.ps/vcps, $racand $deccand 0. $zoomin $racand $deccand 0 0 0 0 0 0 0 $racand $deccand
         handle_ps ${pidnm}error_map.ps
      # ps2eps -B -q error_map.ps
      # open error_map.eps

#plot the SED
         echo
         ${BINF}/plot_sed ${pidnm}Sed.txt ${pidnm}sed.ps/cps $source
         handle_ps ${pidnm}sed.ps
         echo
         ${BINF}/plot_lc ${pidnm}Sed.txt ${pidnm}lc.ps/cps ${pidnm}LC.txt $source
         [ -f ${pidnm}LC.ps ] && handle_ps ${pidnm}LC.ps
         rm -rf ${pidnm}vou-aladin.html
         ${BINF}/aladin_error_map ${pidnm}phase2 ${pidnm}error_map.txt ${HERE}/aladin_script.js ${pidnm}vou-aladin.html
# mv vou-aladin.html ~/.
         open ${pidnm}vou-aladin.html
      fi
      # ps2eps -B -q sed.ps -R +
      # rm -f error_map.ps
      # rm -f sed.ps
      # open sed.eps
#      sort -n -k 5 ${pidnm}LC.txt > ${pidnm}LC_sorted.txt
      [ $showsed == 'osed' ] && open ${pidnm}Sed.txt
##############################################################

#for SED builder tool and future catalog
      rm -f ${pidnm}Out4SedTool.txt
      rased=`echo $racand | sed 's/\./_/g'`
      decsed=`echo $deccand | sed 's/\./_/g' | sed 's/-/m/g'`
      ${BINF}/convert_sed ${pidnm}Sed.txt ${pidnm}Out4SedTool.txt ${pidnm}Sed.csv
      [ -d Results/SEDtool -a -f Out4SedTool.txt ] && cp Out4SedTool.txt Results/SEDtool/$rased"_"$decsed"_"sedtool.txt
##############################################################

#save the results as a tex pdf
      #cp sed.eps 4tex/sed$source.eps
      #cp error_map.eps 4tex/error_map$source.eps
      #cp candidates.eps 4tex/.
      #cp RX_map.eps 4tex/.

#save the phase 2 results in the folder
      [ -d Results/$xrtnm -a -f sed.*ps ] && cp sed.*ps Results/$xrtnm/$source"_"sed.eps
      [ -d Results/$xrtnm -a -f error_map.*ps ] && cp error_map.*ps Results/$xrtnm/$source"_"error_map.eps
      [ -d Results/$xrtnm -a -f LC.*ps ] && cp LC.*ps Results/$xrtnm/$source"_"LC.eps
      [ -d Results/$xrtnm -a -f Sed.txt ] && cp Sed.txt Results/$xrtnm/$source"_"Sed.txt
      [ -d Results/$xrtnm -a -f output2.csv ] && cp output2.csv Results/$xrtnm/$source"_"output2.csv

#PID number for online version
      if [ $pid ]; then
         echo PID number = $pid
         [ -f ${pidnm}sed.eps ] && mv ${pidnm}sed.eps $pid"_"$source"_"sed.eps
         [ -f ${pidnm}error_map.eps ] && mv ${pidnm}error_map.eps $pid"_"$source"_"error_map.eps
         [ -f ${pidnm}LC.eps ] && mv ${pidnm}LC.eps $pid"_"$source"_"LC.eps
         [ -f ${pidnm}error_map.txt ] && mv ${pidnm}error_map.txt $pid"_"$source"_"error_map.txt
         [ -f ${pidnm}Sed.txt ] && mv ${pidnm}Sed.txt $pid"_"$source"_"sed.txt
         [ -f ${pidnm}Out4SedTool.txt ] && mv ${pidnm}Out4SedTool.txt $pid"_"$source"_"Out4SedTool.txt
      fi
   fi
done

#remove the vo files from various catalogs
rm -rf eada_files
rm -f ${pidnm}*.1.csv
rm -f ${pidnm}*.i.csv
rm -f ${pidnm}*.2.csv
rm -f ${pidnm}xrtdeep.csv
[ $source == sed ] && unset zoomin
unset VOUB_AUTOSED
